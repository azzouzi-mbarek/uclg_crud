type Person { 
    id: ID!
    first_name:String!
    last_name: String!
    image_url: String
    sex: String
    birthday: Date
    profession: String
    nationality: String
    study_area: String
    short_biography: String
    email: String
    number_phone: String
    created_at: DateTime
    updated_at: DateTime
    academicLevel: AcademicLevel @belongsTo

}

type AcademicLevel{
    id: ID!
    name: String
    bac_level: String
    created_at: DateTime
    updated_at: DateTime
    persons: [Person] @hasMany

}

extend type Query    {
    persons: [Person] @all
    # Persons: [Person] @field(resolver: "App\\Http\\GraphQL\\Queries\\PersonQueries@persons")
    # regions : [Person] @field(resolve : "App\\Http\\GraphQL\\Queris\\PersonQueris@regions")
    person(id: ID @eq): Person @find
   academicLevelByName(name: String @eq): [AcademicLevel] @all
    academicLevels: [AcademicLevel] @all
    academicLevel(id: ID @eq): AcademicLevel @find
}

input PersonInput {
    
    first_name: String @rules(apply : ["required" , "unique:persons"])
    last_name: String @rules(apply : ["required" , "unique:persons"])
    image_url: String @rules(apply : ["nullable"])
    sex: String @rules(apply : ["nullable"])
    birthday: Date @rules(apply : ["nullable"])
    profession: String @rules(apply : ["nullable"])
    nationality: String @rules(apply : ["nullable" ])
    study_area: String @rules(apply : ["nullable"])
    short_biography: String @rules(apply : ["nullable" , "string"])
    email: String @rules(apply : ["nullable" , "email"])
    number_phone: String @rules(apply : ["nullable"])
    academic_level_id: Int  @rules(apply : ["nullable" ])


    
}
input AcademicLevelInput {
    
    name: String @rules(apply : ["required" , "unique:academicLevels"])
    bac_level: string  @rules(apply : ["nullable" ])


    
}

extend type Mutation   {

    createAcademicLevel(
        name: String @rules(apply: ["required", "unique:academic_levels,name"])
        bac_level: String  @rules(apply : ["nullable" ])
    ): AcademicLevel @create

    updateAcademicLevel(
        id: ID @rules(apply: ["required"])
        name: String @rules(apply: ["required", "unique:academic_levels,name"])
    ): AcademicLevel @update

    deleteAcademicLevel(
        id: ID! @rules(apply: ["required"])
    ): AcademicLevel @delete

     createPerson(
        first_name: String @rules(apply : ["required"])
        last_name: String @rules(apply : ["required"])
        image_url: String  @rules(apply : ["nullable" ])
        sex: String  @rules(apply : ["nullable" ])
        birthday: Date  @rules(apply : ["nullable" ])
        profession: String  @rules(apply : ["nullable" ])
        nationality: String  @rules(apply : ["nullable" ])
        study_area: String  @rules(apply : ["nullable" ])
        short_biography: String  @rules(apply : ["nullable" ])
        email: String  @rules(apply : ["nullable" ])
        number_phone: String  @rules(apply : ["nullable" ])
        academic_level_id: Int  @rules(apply : ["nullable" ])
     ) : Person @create 


    updatePerson(
        id: ID @rules(apply: ["required"])
        first_name: String @rules(apply : ["required"])
        last_name: String @rules(apply : ["required"])
         image_url: String  @rules(apply : ["nullable" ])
        sex: String  @rules(apply : ["nullable" ])
        birthday: Date  @rules(apply : ["nullable" ])
        profession: String  @rules(apply : ["nullable" ])
        nationality: String  @rules(apply : ["nullable" ])
        study_area: String  @rules(apply : ["nullable" ])
        short_biography: String  @rules(apply : ["nullable" ])
        email: String  @rules(apply : ["nullable" ])
        number_phone: String  @rules(apply : ["nullable" ])
        academic_level_id: Int  @rules(apply : ["nullable" ])
       ): Person @update

    deletePerson(
        id:ID! @rules(apply:["required"])
        ) : Person @delete
}
